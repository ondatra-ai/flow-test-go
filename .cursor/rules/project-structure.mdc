---
description: 
globs: 
alwaysApply: true
---
# Project Structure and Implementation Rules

## Directory Structure
```
./
├── src/                                   # Source code directory for the application
│   ├── config/                            # Configuration management and dependency injection
│   │   ├── container.ts                   # Dependency injection container setup using tsyringe
│   │   └── tokens.ts                      # DI tokens definitions using symbols for type safety
│   ├── utils/                             # Utility functions and helpers
│   │   ├── logger.ts                      # Logging utilities with console logger implementation
│   │   └── test-templates.ts              # Test template utilities for generating e2e test files
│   └── index.ts                           # Main entry point with CLI setup and test generation commands
├── memory-bank/                           # AI Memory Bank system for task management
│   ├── archive/                           # Completed task archives
│   ├── creative/                          # Creative phase documentation
│   ├── reflection/                        # Task reflection documents
│   ├── activeContext.md                   # Current active context
│   ├── productContext.md                  # Product-specific context
│   ├── projectbrief.md                    # Project overview and objectives
│   ├── progress.md                        # Overall project progress
│   ├── style-guide.md                     # Code style and design guidelines
│   ├── systemPatterns.md                  # System patterns and standards
│   ├── tasks.md                           # Current task tracking
│   └── techContext.md                     # Technical context and decisions
├── custom_modes/                          # Custom operational modes for AI workflows
│   ├── creative_instructions.md           # Creative phase instructions
│   ├── implement_instructions.md          # Implementation mode instructions
│   ├── plan_instructions.md               # Planning phase instructions
│   ├── reflect_archive_instructions.md    # Reflection and archival instructions
│   └── van_instructions.md                # VAN mode instructions
├── mcps/                                  # MCP server implementations
│   └── goodday-mcp/                       # Example MCP server implementation
├── tests/                                 # Testing infrastructure
│   ├── unit/                              # Unit tests (mirrors src structure)
│   │   └── utils/                         # Unit tests for utility functions
│   ├── integration/                       # Integration tests
│   │   ├── data/                          # Test data directory with fixtures and examples
│   │   └── test-generation-e2e.test.ts    # Integration tests for test generation features
│   └── test-utils/                        # Test utilities
│       ├── file-utils.ts                  # File structure utilities
│       ├── test-directory.ts              # Test directory creation utilities
│       ├── test-environment.ts            # Test environment setup
│       └── timestamp.ts                   # Timestamp generation utilities
├── scripts/                               # Build and utility scripts
│   ├── build.ts                           # Build script for TypeScript compilation
│   ├── get-pr-number.ts                   # PR number utility using GitHub CLI
│   ├── list-pr-conversations.ts           # List PR conversations script
│   ├── merged-prs-last-24h.ts             # Recent PR tracking script
│   └── resolve-pr-conversation.ts         # Resolve PR conversation script
├── coverage/                              # Test coverage reports generated by Vitest
├── test_results/                          # Test execution results and output files
├── docker-compose.mcps.yml                # Docker compose configuration for MCP servers
├── sonar-project.properties               # SonarQube project configuration
├── CLAUDE.md                              # Claude AI integration documentation
├── README.md                              # Main project documentation
├── package.json                           # Node.js dependencies and project metadata
├── tsconfig.json                          # TypeScript configuration with strict compiler settings
└── vitest.config.ts                       # Vitest test configuration
```

## Key Architectural Concepts

### Core Application Structure
- **src/**: Main application code with utilities and configuration
- **index.ts**: Entry point for CLI and test generation functionality

### AI Memory Bank System
- **memory-bank/**: Centralized knowledge management system
- Tracks project context, tasks, and progress
- Maintains creative documentation and reflection archives
- Enforces system patterns and quality standards

### Custom Operational Modes
- **custom_modes/**: AI workflow instructions for different phases
- Supports creative, implementation, planning, and reflection phases
- Enables structured AI-driven development workflows

### Testing Infrastructure
- **tests/**: Comprehensive testing setup with unit and integration tests
- **test-utils/**: Reusable testing utilities and environment setup
- **coverage/**: Test coverage reporting and analysis

### MCP Integration
- **mcps/**: Model Context Protocol server implementations
- Supports external tool integration and extensibility
- Docker-based deployment for MCP servers

### Development Tools
- **scripts/**: Build automation and development utilities
- PR management and conversation tracking tools
- SonarQube integration for code quality analysis

## Test Data Structure
- All content beneath `tests/integration/data/` contains test data and fixtures
- Test data includes example projects, expected outputs, and test scenarios
- Test data structure may vary based on specific test requirements
- Do not expand all files in test data directory in documentation
